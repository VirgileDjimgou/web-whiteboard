(ns web-whiteboard.client.schema.core
  "Serves as a lightweight data definition reference"
  (:require [schema.core :as s]))

(def PenEvent
  "Schema for the pen events generated by the ui

  Most often, these correspond to browser MouseEvents."
  {:mode s/Keyword
   :id s/Str
   :cx s/Num
   :cy s/Num
   :r s/Num
   :fill s/Str})

(def UiAction
  "Schema for the actions that are sent to the ui channel throughout the system

  UiActions are used by the main ui-chan to handle both local client actions, as
  well as remote client actions.

  Known types:
  #{:pen-down :pen-move :pen-up
    :undo-stroke}"
  {:type s/Keyword
   :client-id s/Str
   :whiteboard-id s/Str
   (s/optional-key :data) s/Any
   })

(def Stroke
  "Schema to define a stroke

  As a client uses the application, they conceptually make many pen stokes in 
  order to draw to the canvas.

  In words, it is a pen-down followed by 0 or more pen-moves followed by a pen-up.

  <Stroke> ::= <pen-down> *[<pen-move>] <pen-up>
  <pen-down> ::= <ui-action>
  <pen-move> ::= <ui-action>
  <pen-up> ::= <ui-action>
  
  TODO: Need to incorporate BNF if possible, currently just checks for a list of
  UiActions"
  [UiAction])

(def HistoryMapEntry
  "The per-client state needed to support undo/redo

  :stroke-stack is a history of the strokes the user has made
  :undo-stack is a stack for allowing undo/redo operations"
  {:stroke-stack [UiAction]
   :undo-stack [UiAction]})

(def HistoryMap
  "Schema for the state responsible for maintaining user history for undo/redo

  The HistoryMap takes a :client-id (s/Str) and returns a HistoryMapEntry for 
  that client"
  {s/Str HistoryMapEntry})
